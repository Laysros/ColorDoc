1
00:00:00,000 --> 00:00:04,220
What does that mean in terms of how many index blocks we need?

2
00:00:04,220 --> 00:00:07,060
Well, we need to point to 200,000,

3
00:00:07,060 --> 00:00:09,905
we can point to 60 from each one.

4
00:00:09,905 --> 00:00:13,770
So, you divide the 200,000 by 60 and you'll find out that the number of

5
00:00:13,770 --> 00:00:17,760
index blocks on this sparse index is 3,334.

6
00:00:17,760 --> 00:00:23,330
It would actually be possible to build a primary index as a dense index also.

7
00:00:23,330 --> 00:00:26,040
So, instead of picking up the k value of the first block,

8
00:00:26,040 --> 00:00:28,000
we pick up every single k value,

9
00:00:28,000 --> 00:00:31,470
and then every single one of them will result in

10
00:00:31,470 --> 00:00:35,640
an insertion of that k value and a pointer to block one, every single one.

11
00:00:35,640 --> 00:00:37,850
Then when we come to the k values here,

12
00:00:37,850 --> 00:00:40,875
they are going to be entered together with pointers to block two.

13
00:00:40,875 --> 00:00:42,475
It will still be sorted,

14
00:00:42,475 --> 00:00:43,710
it will be dense,

15
00:00:43,710 --> 00:00:46,390
meaning that all the k values are in the index.

16
00:00:46,390 --> 00:00:48,360
The index will certainly be bigger.

17
00:00:48,360 --> 00:00:49,710
Using the same numbers,

18
00:00:49,710 --> 00:00:54,910
you will actually see that it's about 20 times bigger at 66,000.

19
00:00:54,910 --> 00:01:01,230
One advantage of having every single k value is some queries can now actually be s,

20
00:01:01,230 --> 00:01:05,980
that do not need to access the data but instead can just access the index.

21
00:01:05,980 --> 00:01:07,300
So, it says, for example,

22
00:01:07,300 --> 00:01:09,320
what's the maximum k value,

23
00:01:09,320 --> 00:01:12,565
the minimum k value, average k value,

24
00:01:12,565 --> 00:01:16,245
et cetera, that can be termed by query on the index alone.

25
00:01:16,245 --> 00:01:20,805
Also, want to emphasize that primary indexes are great not just to find

26
00:01:20,805 --> 00:01:23,310
a particular record with a particular value

27
00:01:23,310 --> 00:01:26,090
but they are great at allowing you to do range queries.

28
00:01:26,090 --> 00:01:29,700
So, once you find the first one in a range, then of course,

29
00:01:29,700 --> 00:01:34,690
you can just follow the next values at the data level or at the index level.

30
00:01:34,690 --> 00:01:37,615
So, let's take a look at some lookup times.

31
00:01:37,615 --> 00:01:40,590
So, since what we have now is a sorted file,

32
00:01:40,590 --> 00:01:43,295
but the file is smaller than the data file here,

33
00:01:43,295 --> 00:01:47,990
let us use n to indicate the number of index blocks

34
00:01:47,990 --> 00:01:52,850
where previously we used uppercase N to indicate the number of data blocks.

35
00:01:52,850 --> 00:01:56,550
So, now the cost of doing a search in this sorted file

36
00:01:56,550 --> 00:02:00,690
is therefore log base 2 to lowercase n. But then,

37
00:02:00,690 --> 00:02:03,090
once you find the correct value, then of course,

38
00:02:03,090 --> 00:02:04,640
you have to go access the data,

39
00:02:04,640 --> 00:02:05,720
so we got to add one.

40
00:02:05,720 --> 00:02:11,490
So, for the sparse index where the number of blocks is 3,334,

41
00:02:11,490 --> 00:02:12,825
to look things up,

42
00:02:12,825 --> 00:02:19,630
you basically do log base 2 to 3,334 plus 1 and multiply

43
00:02:19,630 --> 00:02:22,920
that by the 10 millisecond for a grand total of

44
00:02:22,920 --> 00:02:26,825
0.13 seconds to do the lookup through this index.

45
00:02:26,825 --> 00:02:30,510
Notice that the 0.13 second is lower than the

46
00:02:30,510 --> 00:02:35,440
0.18 seconds we used when we did binary search on the data file.

47
00:02:35,440 --> 00:02:38,415
So, it is cheaper because we cut down the size.

48
00:02:38,415 --> 00:02:43,235
There's also a penalty involved in that because there's an extra level to access now.

49
00:02:43,235 --> 00:02:47,945
But all in all, we went down from 0.18 seconds to 0.13 seconds.

50
00:02:47,945 --> 00:02:52,690
The dense index is obviously larger so we can expect the cost to be higher,

51
00:02:52,690 --> 00:02:58,225
so log base 2 to the 66,666 plus the 1 is about

52
00:02:58,225 --> 00:03:03,880
17 multiplied by the 10 milliseconds gives you 0.17 seconds.

53
00:03:03,880 --> 00:03:08,070
So, even though this index has many more k values,

54
00:03:08,070 --> 00:03:11,355
it is actually still cheaper to use the dense index

55
00:03:11,355 --> 00:03:14,730
than it was to do the search on the data [inaudible].

56
00:03:14,730 --> 00:03:18,655
Notice that what we are talking about here is just lookup cost.

57
00:03:18,655 --> 00:03:20,540
So, in all of these cases,

58
00:03:20,540 --> 00:03:22,215
if we are doing some updates,

59
00:03:22,215 --> 00:03:26,625
then the cost would be both the lookup cost in order to find what we are

60
00:03:26,625 --> 00:03:31,555
updating and then the cost to write things back to disk after they've been changed.

61
00:03:31,555 --> 00:03:34,020
In typical simple situations,

62
00:03:34,020 --> 00:03:37,745
you would add an extra disk access to write things back.

63
00:03:37,745 --> 00:03:40,970
In some cases, if they had changed that affect the index,

64
00:03:40,970 --> 00:03:44,890
you will actually have additional cost related to that.

