1
00:00:00,000 --> 00:00:05,335
So, having seen all of the problems that result from an inappropriate decomposition,

2
00:00:05,335 --> 00:00:08,105
let's look at a perfect decomposition.

3
00:00:08,105 --> 00:00:09,290
So, in this case, here,

4
00:00:09,290 --> 00:00:13,460
we take the regular usual relation and decompose it into three tables.

5
00:00:13,460 --> 00:00:18,210
The idea then is that we throw this one away and we operate on these,

6
00:00:18,210 --> 00:00:21,440
and when we would like to see this one again,

7
00:00:21,440 --> 00:00:25,355
we simply join these together and it appears as if we had

8
00:00:25,355 --> 00:00:29,705
continued to operate on the regular user table in a disciplined manner.

9
00:00:29,705 --> 00:00:32,015
This decomposition is perfect.

10
00:00:32,015 --> 00:00:33,340
Let's analyze it.

11
00:00:33,340 --> 00:00:38,585
So, first of all, you saw in the regular user table that there was a lot of redundancy.

12
00:00:38,585 --> 00:00:44,525
For example, user1 living in the current city Seattle was repeated three times.

13
00:00:44,525 --> 00:00:46,245
That is no longer the case,

14
00:00:46,245 --> 00:00:51,700
and other instances of redundancy that we had in this relation have disappeared now.

15
00:00:51,700 --> 00:00:53,475
Since there's no redundancy,

16
00:00:53,475 --> 00:00:57,365
it is not possible to end up with an inconsistent database.

17
00:00:57,365 --> 00:00:59,480
Let's look at some of the other problems.

18
00:00:59,480 --> 00:01:03,560
There will not be any insertion anomalies anymore either because

19
00:01:03,560 --> 00:01:06,350
the facts that are represented by the forms

20
00:01:06,350 --> 00:01:09,515
dependencies are separated in different tables.

21
00:01:09,515 --> 00:01:14,150
Therefore, you will also not have deletion anomalies because you can delete

22
00:01:14,150 --> 00:01:19,275
one fact without inadvertently deleting other facts for a particular user.

23
00:01:19,275 --> 00:01:24,560
There won't be any update anomalies because information is not redundant.

24
00:01:24,560 --> 00:01:26,480
Also, you can check it,

25
00:01:26,480 --> 00:01:28,790
but there's no information loss here.

26
00:01:28,790 --> 00:01:33,404
If you join this table together with this table on email,

27
00:01:33,404 --> 00:01:38,660
you will simply get the birth year and current city information appended to this table.

28
00:01:38,660 --> 00:01:40,990
So, none of these joined fields,

29
00:01:40,990 --> 00:01:42,355
the pair of emails,

30
00:01:42,355 --> 00:01:43,860
the pair of birth years,

31
00:01:43,860 --> 00:01:49,175
is going to create any additional tuples that were not in the original relation.

32
00:01:49,175 --> 00:01:51,380
There's also no dependency loss.

33
00:01:51,380 --> 00:01:55,565
There is a separate relation for each one of the functional dependencies we had.

34
00:01:55,565 --> 00:01:58,045
Email, interest, determine since age,

35
00:01:58,045 --> 00:02:01,445
email determine birth year and current city,

36
00:02:01,445 --> 00:02:03,960
and birth year determine salary.

37
00:02:03,960 --> 00:02:06,130
Big question is, how do we get there?

38
00:02:06,130 --> 00:02:09,840
How do we understand that starting out with this,

39
00:02:09,840 --> 00:02:15,700
these are the three relations that we should end up with after our decomposition?

